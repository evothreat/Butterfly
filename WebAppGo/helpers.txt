const insertQuery1 = "INSERT INTO workers VALUES(:id, :hostname, :country, :ip_addr, :os, :is_admin, :boost, :last_seen)"

	db.NamedExec(insertQuery1, w1)
	db.NamedExec(insertQuery1, w2)
	db.NamedExec(insertQuery1, w3)
	db.NamedExec(insertQuery1, w4)

const insertQuery2 = "INSERT INTO hardware_infos VALUES(:gpu, :cpu, :ram, :worker_id)"

	db.NamedExec(insertQuery2, hw1)
	db.NamedExec(insertQuery2, hw2)
	db.NamedExec(insertQuery2, hw3)
	db.NamedExec(insertQuery2, hw4)

hw5 := HardwareInfo{
		Gpu: "Intel Core i9-10980XE Extreme Edition Processor",
		Cpu: "Intel(R) UHD Graphics 630",
		Ram: "32,0 GB",
		WorkerId: "wfwofhwfwhfiuwh",
	}
	if _, err := db.NamedExec(insertQuery2, hw5); err != nil {
		fmt.Println(err)
	}

------------------------------------------------------------------------------------------
type Worker struct {
	Id       string    `json:"id" db:"id"`
	Hostname string    `json:"hostname" db:"hostname"`
	Country  string    `json:"country" db:"country"`
	IpAddr   string    `json:"ip_addr" db:"ip_addr"`
	Os       string    `json:"os" db:"os"`
	IsAdmin  bool      `json:"is_admin" db:"is_admin"`
	Boost    bool      `json:"boost" db:"boost"`
	LastSeen time.Time `json:"last_seen" db:"last_seen"`
}

type HardwareInfo struct {
	Gpu      string `json:"gpu" db:"gpu"`
	Cpu      string `json:"cpu" db:"cpu"`
	Ram      string `json:"ram" db:"ram"`
	WorkerId string `json:"worker_id" db:"worker_id"`
}



type JobReport struct {
	JobId  int    `json:"job_id" db:"job_id"`
	Report string `json:"report" db:"report"`
}

type Upload struct {
	Id       int       `json:"id" db:"id"`
	Filename string    `json:"filename" db:"filename"`
	Type     string    `json:"type" db:"type"`
	Size     uint64    `json:"size" db:"size"`
	Created  time.Time `json:"created" db:"created"`
	WorkerId string    `json:"worker_id" db:"worker_id"`
}

func ValuesMapToWhere(valuesMap map[string]interface{}) (string, []interface{}) {
	cols := ""
	vals := make([]interface{}, 0, 15)
	for k, v := range valuesMap {
		cols += k + "=?,"
		vals = append(vals, v)
	}
	cols = strings.TrimSuffix(cols, ",")
	return cols, vals
}

type Row interface {
	Scan(...interface{}) error
}

type RowScanner interface {
	ScanRow(row Row) error
}

func QueryRows(rs RowScanner, query string, args ...interface{}) error {
	rows, err := db.Query(query, args...)
	if err != nil {
		return err
	}
	defer rows.Close()
	for rows.Next() {
		if err := rs.ScanRow(rows); err != nil {
			return err
		}
	}
	return rows.Err()
}

func QueryRow(rs RowScanner, query string, args ...interface{}) error {
	return rs.ScanRow(db.QueryRow(query, args...))
}

func ExecQuery(query string, args ...interface{}) (int64, error) {
	res, err := db.Exec(query, args...)
	if err != nil {
		return 0, err
	}
	return res.RowsAffected()
}


func RowToDict(r types.Row, colsStr string) (map[string]string, error) {
	cols := strings.Split(colsStr, ",")
	n := len(cols)
	values := make([][]byte, n)
	valuesPtr := make([]interface{}, n)
	for i := 0; i < n; i++ {
		valuesPtr[i] = &values[i]
	}
	if err := r.Scan(valuesPtr...); err != nil {
		return nil, err
	}
	dict := make(map[string]string)
	for i, c := range cols {
		fmt.Println(values[i])
		dict[c] = string(values[i])			// cant convert all values to string
	}
	fmt.Println(dict)
	return dict, nil
}

func RowToDict(r types.Row, colsStr string) ([]byte, error) {
	cols := strings.Split(colsStr, ",")
	n := len(cols)
	values := make([][]byte, n)
	valuesPtr := make([]interface{}, n)
	for i := 0; i < n; i++ {
		valuesPtr[i] = &values[i]
	}
	if err := r.Scan(valuesPtr...); err != nil {
		return nil, err
	}
	totalN := n * 4 - 1
	for _, c := range cols {
		totalN += len(c)
	}
	data := make([]byte, 0, totalN)
	data = append(data, '{')
	for i := 0; i < n; i++ {
		data = append(data, '"')
		data = append(data, cols[i]...)
		data = append(data, []byte{'"', ':'}...)
		data = append(data, values[i]...)
		if i != n-1 {
			data = append(data, ',')
		}
	}
	data = append(data, '}')
	return data, nil
}

func RowToDict(r types.Row, colsStr string) (map[string]interface{}, error) {
	cols := strings.Split(colsStr, ",")
	n := len(cols)

	values := make([]interface{}, n)
	valuesPtr := make([]interface{}, n)
	for i, _ := range values {
		valuesPtr[i] = &values[i]
	}
	if err := r.Scan(valuesPtr...); err != nil {
		return nil, err
	}
	dict := make(map[string]interface{})
	for i, c := range cols {
		dict[c] = values[i]
	}
	fmt.Println(dict)
	return dict, nil
}